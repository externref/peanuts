{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"peanuts","text":"<p>  A minimalist JSON based database for people who love peanuts :3 ( or not ) </p> <p>Warning</p> <p>This database system is just a raw idea and prone to unexpected behaviour. </p> <p>Getting Started</p>"},{"location":"#about","title":"About","text":"<p><code>peanuts</code> is a JSON based database system using file-name approach to store user data with strict schema checking and CLI flexibility.</p> <p>It uses simple SQL like syntax for querying and inserting data along-side a expressive CLI with helpful error messages in case you make a mistake while using the commands.</p> <p>How is the data stored?</p> <p>The project comes with a <code>data</code> folder that stores all the data. The <code>databases</code> sub-directory stores all the database related content.</p> <p>For each database, a new directory is created under <code>data/databases</code> with this structure </p> <pre><code>\u2514\u2500\u2500 data/databases\n    \u2514\u2500\u2500 database_name # name of the database\n        \u251c\u2500\u2500 data # this is where data is stored\n        \u2502   \u2514\u2500\u2500 schema_name # schema related to the item\n        \u2502       \u2514\u2500\u2500 entry_id.pnuts.json  # saved data with the unique ID\n        \u2514\u2500\u2500 schemas # all schema structure are saved under this\n            \u2514\u2500\u2500 schema_name.pnuts.json # json of a particular schema\n</code></pre>"},{"location":"getting-started/","title":"Getting Started","text":"<p>The database is only available as a python package as of now, that can be downloaded from Github.</p>"},{"location":"getting-started/#requirements","title":"Requirements","text":"<ul> <li> <p>Python 3.8+</p> <p>Python comes pre-installed in most linux distros. You can install python for mac and windows from the official website. (<code>Windows</code>, <code>macOS</code>). Make sure to install pip and add python to path.</p> </li> <li> <p>Poetry</p> <p>Poetry is a python packaging and dependency management tool. <code>peanuts</code> heavily rely on it for the CLI and dependencies. You can install it from PYPI. <pre><code>python -m pip install poetry\n</code></pre></p> </li> <li> <p>Git (optional)</p> <p>Git can be used to clone the repository to your device directly. Alternatively you can manually download code from github.</p> </li> </ul>"},{"location":"getting-started/#setting-up-the-project","title":"Setting up the project","text":"<p>Clone the github repository using the git clone command and navigate into the project directory.</p> <pre><code>git clone https://github.com/externref/peanuts\ncd peanuts\n</code></pre> <p>Info</p> <p>Alternatively you can download the project from Github from here and unzip it to get the same output as <code>git clone</code> if you don't plan to contribute.</p> <p>To start with the database setup, install all the dependencies using <code>poetry install</code> command and enable the poetry venv using <code>poetry shell</code></p> <pre><code>[python -m] poetry install\n[python -m] poetry shell\n# you might have to use [python -m] based on your python installation\n</code></pre>"},{"location":"getting-started/#schema","title":"Schema","text":"<p>Schemas defines the strucutre of the data type to save. It acts as an equivalent of a SQL table in this case scenario. This is a sample schema configuration: </p> <pre><code>{\n    \"name\": \"string\",\n    \"age\": \"integer\"\n}\n</code></pre> <p>The schema must be defined using a dictionary with name-type mapping, allowed types are:</p> <ul> <li> <p><code>string</code>: For strings</p> </li> <li> <p><code>integer</code>: For integers</p> </li> <li> <p><code>float</code>: For floats</p> </li> <li> <p><code>bool</code>: For booleans</p> </li> <li> <p><code>a_&lt;other type&gt;</code>: For array of above types ( <code>a_string</code>, <code>a_bool</code>, etc...)</p> </li> </ul>"},{"location":"getting-started/#example","title":"Example","text":"<p>Here's a functional example of how easy it is to use the database.</p> <pre><code>(peanuts-py3.10) sarthak@sarthak:~/peanuts$ peanuts students\n[01:55:32]  Welcome to peanuts \ud83e\udd5c, Connected to database: students\n# !add_schema studentinfo { \"name\": \"string\", \"age\": \"integer\" }\n# insert studentinfo 1\nname (type: SchemaTypeToPyT.STRING): sarthak\nage (type: SchemaTypeToPyT.INTEGER): 19\n# select studentinfo 1\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 name \u2502 sarthak \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 age  \u2502 19      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"}]}